JAM_INCLUDE_PATH ?= jam ;

include $(JAM_INCLUDE_PATH)/redemption-config.jam ;
include $(JAM_INCLUDE_PATH)/cxxflags.jam ;
include $(JAM_INCLUDE_PATH)/defines.jam ;
include $(JAM_INCLUDE_PATH)/includes.jam ;

REDEMPTION_CXXFLAGS ?=
    <cxxflags>-std=c++17
    <toolset>gcc:<cxxflags>-ftemplate-depth=524 # bjam force value to 128... è_é
;

if $(NO_FFMPEG) = 1 {
    REDEMPTION_CXXFLAGS += <define>REDEMPTION_NO_FFMPEG=1 ;
}

variant coverage : san : ;

#gcov -a -c -b -f -o bin/gcc-4.6/coverage/tests/test_stream.gcno bin/gcc-4.6/coverage/test_stream

lib gcov : : <name>gcov : ;

constant GCOV_NO_BUILD : <variant>coverage:<build>no ;

constant GCOV :
    <variant>coverage:<cxxflags>--profile-arcs
    <variant>coverage:<cxxflags>--test-coverage
    <variant>coverage:<cxxflags>--coverage
    <variant>coverage:<cxxflags>-pg
    <variant>coverage:<linkflags>-pg
    #<variant>coverage:<link>shared
    <variant>coverage:<library>gcov
;

project redemption
    : requirements

    <conditional>@includes
    <conditional>@flags
    $(GCOV)
    # <lto>on
    # <suggest>on
    # <stack-protector>on
    # <relro>on
    # <security>on # strong, all

    $(CXXFLAGS)

    # <cxxflags>-fpie
    <cxxflags>-fPIC
    # <cxxflags>-fno-rtti

    $(REDEMPTION_CXXFLAGS)

    <define>_FILE_OFFSET_BITS=64
    <define>_LARGEFILE64_SOURCE

    <define>__STDC_FORMAT_MACROS
    <define>ZLIB_CONST

   : default-build release
;

include $(JAM_INCLUDE_PATH)/ocr.jam ;
include $(JAM_INCLUDE_PATH)/libs.jam ;

include $(JAM_INCLUDE_PATH)/testing-coverage.jam ;

explicit
    install
    instexe
    install-bin
    install-lib
    install-share
    install-etc
    install-etc-themes
    install-etc-ppocr
    install-etc-ppocr-latin
    install-etc-ppocr-latin-cyrillic
    exe
    libs
;

alias instexe : install-bin ;
alias install :
    install-bin install-lib
    install-etc
    install-etc-themes
    install-etc-ppocr
    install-share
;
alias exe     : rdpproxy rdpclient rdpheadless rdpinichecker ;
alias libs    : libredrec libscytale libiametrics ;

alias ocr_tools : display_learning extract_text ppocr_extract_text ;

alias install-etc-ppocr : install-etc-ppocr-latin install-etc-ppocr-latin-cyrillic ;

install install-bin
    : exe
    : <install-type>EXE
      #<install-dependencies>on
    : <location>$(INSTALLDIR)$(BIN_PREFIX)
    ;

install install-share
    : [ glob "$(REDEMPTION_SYS_PATH)/share/rdpproxy/[^.k]*" ]
    :
    : <location>$(INSTALLDIR)$(SHARE_PREFIX)
    ;

install install-etc
    : [ glob
        $(REDEMPTION_ETC_DH_GLOG)
    ]
    :
    : <location>$(INSTALLDIR)$(ETC_PREFIX)
    ;

install install-etc-ppocr-latin
    : [ glob $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/* ]
    :
    : <location>$(INSTALLDIR)$(ETC_PREFIX)/ppocr.latin
    ;

install install-etc-ppocr-latin-cyrillic
    : [ glob $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/* ]
    :
    : <location>$(INSTALLDIR)$(ETC_PREFIX)/ppocr.latin-cyrillic
    ;

install install-etc-themes
    : [ glob $(REDEMPTION_SYS_PATH)/etc/rdpproxy/themes/HOWTO ]
    :
    : <location>$(INSTALLDIR)$(ETC_PREFIX)/themes
    ;

install install-lib
    : libs
    :
    : <location>$(INSTALLDIR)$(LIB_PREFIX)
    ;


obj log.o : $(REDEMPTION_SRC_PATH)/utils/log_as_syslog.cpp ;
obj log_test.o : $(REDEMPTION_SRC_PATH)/utils/log_as_logtest.cpp ;
obj log_print.o : $(REDEMPTION_SRC_PATH)/utils/log_as_logprint.cpp ;

obj app_path_exe.o : $(REDEMPTION_SRC_PATH)/core/app_path.cpp :
    <conditional>@defines
    <define>SHARE_PATH='\"$(SHARE_PREFIX)\"'
    <define>CFG_PATH='\"$(ETC_PREFIX)\"'
;

obj app_path_test.o : $(REDEMPTION_SRC_PATH)/core/app_path.cpp :
    <conditional>@defines-for-test
    <define>SHARE_PATH='\"$(FIXTURES_PATH)\"'
    <define>CFG_PATH='\"$(REDEMPTION_SYS_PATH)/etc/rdpproxy/\"'
;


constant LIB_DEPENDENCIES :
    <library>app_path_exe.o
    <cxxflags>-fPIC
    <variant>release:<cxxflags>-fvisibility=hidden
    <link>shared
    <linkflags>-Wl,-Bsymbolic
    $(GCOV_NO_BUILD)
;

constant OBJ_EXE_DEPENDENCIES :
    $(GCOV_NO_BUILD)
;

constant EXE_DEPENDENCIES :
    <library>app_path_exe.o
    <library>log.o
    $(OBJ_EXE_DEPENDENCIES)
;

constant EXE_DEPENDENCIES_NO_SYSLOG :
    <library>app_path_exe.o
    <library>log_print.o
    $(OBJ_EXE_DEPENDENCIES)
;


obj program_options : $(PROGRAM_OPTIONS_SRC_PATH)/program_options.cpp ;


exe redrec
:
    $(REDEMPTION_SRC_PATH)/main/redrec.cpp
    libredrec
:
    $(EXE_DEPENDENCIES)
;


exe display_learning
:
    $(REDEMPTION_SRC_PATH)/capture/ocr/display_learning.cc
:
    $(GCOV_NO_BUILD)
;

exe extract_text
:
    $(REDEMPTION_SRC_PATH)/capture/ocr/extract_text.cc
    ocr.o
:
    $(GCOV_NO_BUILD)
;

exe ppocr_extract_text
:
    $(REDEMPTION_SRC_PATH)/capture/ocr/ppocr_extract_text.cpp
    $(REDEMPTION_SRC_PATH)/capture/rdp_ppocr/get_ocr_constants.cpp
    ocr
:
    $(GCOV_NO_BUILD)
    <library>log_print.o
#   <library>crypto
;


## ppocr resources {

exe ppocr_write_glyphs :
    $(PPOCR_SRC_PATH)/ppocr/write_glyphs.cpp
    ppocr
:
    $(EXE_DEPENDENCIES_NO_SYSLOG)
;

exe ppocr_normalize_glyphs :
    $(PPOCR_SRC_PATH)/ppocr/normalize_glyphs.cpp
    ppocr
:
    $(EXE_DEPENDENCIES_NO_SYSLOG)
;

exe ppocr_write_datas :
    $(PPOCR_SRC_PATH)/ppocr/write_datas.cpp
    ppocr
:
    $(EXE_DEPENDENCIES_NO_SYSLOG)
;


actions make_ppocr_resources {
    $(PPOCR_MODULE_PATH)/learning "$(>)"
    # latin
    cp $(PPOCR_MODULE_PATH)/resources/glyphs/normalized-glyphs-latin.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/glyphs.txt
    cp $(PPOCR_MODULE_PATH)/resources/datas/latin.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/datas.txt
    cp $(PPOCR_MODULE_PATH)/resources/dict_fr.trie \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/dict.trie.txt
    cp $(PPOCR_MODULE_PATH)/resources/words_lines-latin.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/words_lines.txt

    # latin-cyrillic
    cp $(PPOCR_MODULE_PATH)/resources/glyphs/normalized-glyphs-latin-cyrillic.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/glyphs.txt
    cp $(PPOCR_MODULE_PATH)/resources/datas/latin-cyrillic.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/datas.txt
    cp $(PPOCR_MODULE_PATH)/resources/words_lines-latin-cyrillic.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/words_lines.txt
    cp $(PPOCR_MODULE_PATH)/resources/dict_fr.trie \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/dict.trie.txt
}

explicit ppocr_resources ;

make ppocr_resources :
    ppocr_write_glyphs
    ppocr_normalize_glyphs
    ppocr_write_datas
:
    @make_ppocr_resources
;


## } ppocr resources

# test-run test_meta_protocol2 : test_meta_protocol2.cpp : : <cxxflags>-std=c++14 <library>crypto <library>openssl ;
# explicit test_meta_protocol2 ;


## sashimi {
explicit install-sashimi local-install-sashimi libsashimi sashimi ;

install install-sashimi : sashimi : <location>debian/sashimi/usr/lib ;
install local-install-sashimi : sashimi : <location>/usr/lib ;

alias sashimi : libsashimi tests/sashimi ;

lib libsashimi :
    log_print.o
    src/sashimi/channels.o
    src/sashimi/pki.o
    src/sashimi/sftp.o
    src/sashimi/libssh.o
    src/sashimi/ssh_error.o
    krb5
    gssapi_krb5
    crypto
    dl
    z
    rt
:
    <link>shared
    # <linkflags>-Wl,-Bsymbolic
    $(LIB_DEPENDENCIES)
;
## } sashimi


include $(REDEMPTION_PUBLIC_PATH)/targets.jam ;


actions gen_targets
{
    python3 ./tools/bjam/gen_targets.py > targets.jam
    sed -E '1,1i#generated by `bjam targets.jam` from redemption project
      /^exe main_client_redemption/,/^;/!d
      /^\s*<library>/!d
      /app_path|config\.o|program_options/d
      s#^\s*<library>src/([^.]+)\.o#add_src \1.cpp ;#
      s/^\s*<library>(.*)/add_lib \1 ;/' \
      targets.jam > projects/ClientQtGraphicAPI/redemption_deps.jam
}

explicit targets.jam ;
make targets.jam : : @gen_targets ;

actions test_libredrec
{
    # check is loadable
    $(TOOLS_PATH)/redrec rec $(>) -h > /dev/null && :> $(<)
}

make test_libredrec : libredrec : @test_libredrec
: <variant>san:<build>no <variant>coverage:<build>no ;


## { test_web_video_mp4
explicit test_web_video_mp4 tests/web_video/test.mp4 ;

exe generate_video
:
    $(REDEMPTION_TEST_PATH)/web_video/generate_video.cpp
    src/utils/set_exception_handler_pretty_message.o
:
    $(EXE_DEPENDENCIES_NO_SYSLOG)
    <library>libredrec
    <library>ffmpeg
    <library>png
    <library>dl
;

actions run_web_video_mp4 {
    set -e
    TMP=/tmp/web_video_mp4_test/
    VIDEO=$TMP/test.mp4
    rm -f "$VIDEO"
    mkdir -p $TMP
    "$(>)" $VIDEO
    cp "$(REDEMPTION_TEST_PATH)/web_video/test.html" "$TMP"
    cd $TMP
    python -m SimpleHTTPServer 4104 &
    xdg-open 'http://0000:4104/test.html'
    sleep 3
    pkill -P $$
}

make tests/web_video/test.mp4 : generate_video : @run_web_video_mp4 ;

alias test_web_video_mp4 : tests/web_video/test.mp4 ;
## } test_web_video_mp4
